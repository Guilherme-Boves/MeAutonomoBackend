// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(uuid())
  nome           String
  email          String @unique
  password       String
  role           String
  dataNascimento DateTime
  telefone       String
  endereco       String?
  imagem         String?
  created_at     DateTime? @default(now())
  updated_at     DateTime? @default(now())

  userCli Contratos[] @relation("userCli_id")
  userProf Contratos[] @relation("userProf_id")

  @@map("users")

  userCliente           UserCliente[]
  userProfissional      UserProfissional[]  
  publicarServico       PublicarServico[]
  //contrato              Contratos[]
  avalicacao            Avaliacao[]
}

model UserCliente {
  id String @id @default(uuid())
  cpf String @unique

  user User @relation(fields: [user_id], references: [id])
  
  @@map("userCliente")
  user_id String
}

model UserProfissional {
  id String @id @default(uuid())
  cnpj String @unique
  descricaoSobreMim String?

  user User @relation(fields: [user_id], references: [id])
  
  @@map("userProfissional")
  user_id String
}

model ServicosPrestadosProf {
  id String @id @default(uuid())
  nome String
  preco Decimal? @db.Decimal(10,2) 

  item Item @relation(fields: [item_id], references: [id])

  //servicos ItemContratoServico[]

  @@map("servicosPrestadosProf")
  item_id String  
}

model Agenda {
  id  String @id @default(uuid())
  data DateTime?
  status  Boolean @default(false)

  item Item @relation(fields: [item_id], references: [id])
  
  //agenda ItemContratoAgenda[]
  @@map("agenda")

  item_id String
}

model Categoria {
  id String @id @default(uuid())
  nome String
  imagem String

  tipoDoServico TipoDoServico[]
  @@map("categoria")
}

model TipoDoServico {
  id String @id @default(uuid())
  nome String
  imagem String

  categoria Categoria @relation(fields: [categoria_id], references: [id])
  items Item[]
  @@map("tipoDoServico")
  categoria_id String
}

model PublicarServico {
  id String @id @default(uuid())
  rascunho Boolean @default(true)
  ativo Boolean @default(false)

  user User @relation(fields: [user_id], references: [id])   
  
  @@map("publicarServico")
  items Item[]
  itemsContrato ItemContrato[]
  user_id String
}

model Item {
  id String @id @default(uuid())
  descricao String

  publicacao PublicarServico @relation(fields: [publicacao_id], references: [id])
  tipoDoServico TipoDoServico @relation(fields: [tipoDoServico_id], references: [id])
  agenda Agenda[]
  servicosPrestadosProf ServicosPrestadosProf[]
  @@map("itemsPublicacao")

  publicacao_id String
  tipoDoServico_id String
  user_id String?
}

model Contratos {
  id String @id @default(uuid())
  rascunho Boolean @default(true)
  ativo Boolean @default(false)
  avaliacao Boolean @default(false)

  userCliente User @relation("userCli_id", fields: [userCliente_id], references: [id])
  userProfissional User @relation("userProf_id", fields: [userProfissional_id], references: [id])

  @@map("contratos")
  item ItemContrato[]
  itemAvaliacao ItemAvaliacao[]

  userCliente_id String 
  userProfissional_id String
  created_at DateTime? @default(now()) //Campo adicionado apenas para ordenar os contratos com as datas menores para maiores (Tela de servi√ßos pendentes e finalizados)
}

model ItemContrato {
  id String @id @default(uuid())
  
  contrato Contratos @relation(fields: [contrato_id], references: [id])
  publicacao PublicarServico @relation(fields: [publicacao_id], references: [id])
  
  @@map("itemsContrato")
  servicos ItemContratoServico[]
  agendas ItemContratoAgenda[]
  contrato_id String
  publicacao_id String
}

model ItemContratoServico {
  id String @id @default(uuid())
  nome String
  preco Decimal? @db.Decimal(10,2)
 
  itemContrato ItemContrato @relation(fields: [itemContrato_id], references: [id])
  //servicos ServicosPrestadosProf @relation(fields: [servico_id], references: [id])
 
  @@map("itemsContratoServico")
 
  itemContrato_id String
  //servico_id String
}

model ItemContratoAgenda {
  id String @id @default(uuid())
  data DateTime?
  agenda_id String
  itemContrato ItemContrato @relation(fields: [itemContrato_id], references: [id])  
  //agendas Agenda @relation(fields: [agenda_id], references: [id])
 
  @@map("itemsContratoAgenda")

  itemContrato_id String
  //agenda_id String
}

model Avaliacao {
  id String @id @default(uuid()) 
  user User @relation(fields: [user_id], references: [id])
  //contrato Contratos @relation(fields: [contrato_id], references: [id])
  @@map("avaliacao")

  item ItemAvaliacao[]

  user_id String
  //contrato_id String
}

model ItemAvaliacao {
  id String @id @default(uuid())
  descricao String
  nota Decimal @db.Decimal(10,2)
  userProfissional_id String
  created_at DateTime @default(now())

  contrato Contratos @relation(fields: [contrato_id], references: [id])
  avaliacao Avaliacao @relation(fields: [avaliacao_id], references: [id])

  @@map("itemsAvaliacao")

  contrato_id String
  avaliacao_id String
}

